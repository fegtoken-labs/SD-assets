
name: Deploy static content to Pages

on:
  push:
    branches: 
      - main
      
  workflow_run:
    workflows: ["Sync Branches to Main"]
    types:
      - completed

  workflow_dispatch:
      
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Get changed files
        id: changed-files
        uses: lots0logs/gh-action-get-changed-files@2.2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Printing
        run: |
          echo "${{ steps.changed-files.outputs.all }}"
          
      - name: Call Cloudflare Purge Cache API
        if: steps.changed-files.outputs.all != ''
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          files: ${{ steps.changed-files.outputs.all }}
        run: |
          changed_files=$(echo ${{ steps.changed-files.outputs.files }} | tr '\n' ' ')
          files_list=""
          for file in $files; do
            directory=$(dirname $file)
            file_name=$(basename $file)
            files_list+="\"https://assets.smartdefi.com/${directory}/${file_name}\","
          done
          files_list="[${files_list%,}]"
          echo "Purging cache for files: $files_list"
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/purge_cache" \
          -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data "{\"files\": ${files_list}}"
